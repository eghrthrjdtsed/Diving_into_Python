'''–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
üìå–ö–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á json —Å–ª–æ–≤–∞—Ä—è.
üìå–î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
üìå–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.'''
import random
import os
import json
from functools import wraps
import inspect


def getArgsStr(func, *args, **kwargs) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —Å —É—á—ë—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    –ó–Ω–∞—á–µ–Ω–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–¥—É—Ç –≤ –ø–æ—Ä—è–¥–∫–µ, –∑–∞–¥–∞–Ω–Ω–æ–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
    –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∏–º–µ–Ω–∞–º.

    Args:
        func: –§—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        –°—Ç—Ä–æ–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏
    """
    import random
    import os
    import json
    from functools import wraps
    argsData = inspect.getfullargspec(func)
    res = []

    res.append(", ".join(map(str, args)))

    res.append(", ".join((
        str(kwargs.setdefault(
            argsData.args[len(args) + i],
            argsData.defaults[len(argsData.defaults) - len(argsData.args) + len(args):][i]
        ))
        for i in range(len(argsData.args) - len(args))
    )))

    res.append(", ".join((
        str(kwargs.setdefault(k, argsData.kwonlydefaults[k]))
        for k in argsData.kwonlyargs
    )))

    res.append(", ".join((
        str(kwargs[k])
        for k in sorted(kwargs.keys())
        if k not in argsData.args + argsData.kwonlyargs
    )))

    return ", ".join(filter(bool, res))


def cacheToJson(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        fName = func.__name__ + ".json"
        adding = True if os.path.exists(fName) else False

        with open(fName, "r+" if adding else "w", encoding="utf-8") as jsonFile:
            if adding:
                hashDict = json.load(jsonFile)
            else:
                hashDict = {}

            argsStr = getArgsStr(func, *args, **kwargs)
            if argsStr in hashDict:
                return hashDict[argsStr]
            else:
                res = func(*args, **kwargs)

                if adding:
                    jsonFile.seek(jsonFile.tell() - 3)

                jsonFile.write(
                    ("," if adding else "{") \
                    + json.dumps({argsStr: res}, ensure_ascii=False, indent=2)[1:]
                )

        return res

    return wrapper


@cacheToJson
def task3_func(a, b, c=1, f=1, p=1):
    print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    return ((a + b + c) * f) ** p


task3_func(5, 3, p=3)


@cacheToJson
def task3_func1(a, b, f=2, *args, **kwargs):
    return (a + b) * f + sum(args + tuple(kwargs.values()))


task3_func1(1, 2, 3, y=7, x=2)

import functools


@functools.cache
def task3_func2(a, b, f=2, *args, **kwargs):
    print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    return (a + b) * f + sum(args + tuple(kwargs.values()))


task3_func2(1, 2, f=7, q=3)

a = {'y': 1, 'x': 2}
sorted(a.keys())
